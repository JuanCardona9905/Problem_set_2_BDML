readxl,
readr, # importar Excel
writexl, # exportar Excel
boot, # bootstrapping
ggpubr, # extensiones de ggplot2
WVPlots, # gráficos de variables ponderadas
patchwork, # para combinar gráficos
gridExtra, # para combinar gráficos
ggplot2, # gráficos
caret, # para evaluación de modelos predictivos
glmnet, # para evaluación de modelos predictivos
data.table, # para manipulación de datos
MASS, # El paquete tiene a la funcion de LDA
class, # El paquete tiene a la funcion de k-neighbours
gmodels,
tree,
naniar) # missing
setwd("C:/Users/Juan/Documents/Problem_set_2/Data")
load("base_final.RData")
setwd("C:/Users/Juan/Documents/Problem_set_2/Data")
load("base_final.RData")
setwd("C:/Users/Juan/Documents/Problem_set_2_BDML/Data")
load("base_final.RData")
colnames(train_hogares)
train_hogares <- train_hogares %>% #seleccionar variables
select(Dominio, Ocup_vivienda, Nper, maxEducLevel, nocupados, nincapacitados,
Cabecera, DormitorXpersona, Head_Mujer, ntrabajo_menores, Pobre)
library(tidyverse)
train_hogares <- train_hogares %>% #seleccionar variables
select(Dominio, Ocup_vivienda, Nper, maxEducLevel, nocupados, nincapacitados,
Cabecera, DormitorXpersona, Head_Mujer, ntrabajo_menores, Pobre)
View(train_hogares)
train_hogares <- train_hogares %>% #seleccionar variables
select(Dominio)
library(dplyr)
train_hogares <- train_hogares %>% #seleccionar variables
select(Dominio)
rm(list = ls())
#se cargan los paquetes
library(pacman)
p_load(rio, # importación/exportación de datos
tidyverse, # datos ordenados (ggplot y Tidyverse)
skimr, # datos de resumen
visdat, # visualización de datos faltantes
corrplot, # gráficos de correlación
stargazer, # tablas/salida a TEX.
rvest, # web-scraping
readxl,
readr, # importar Excel
writexl, # exportar Excel
boot, # bootstrapping
ggpubr, # extensiones de ggplot2
WVPlots, # gráficos de variables ponderadas
patchwork, # para combinar gráficos
gridExtra, # para combinar gráficos
ggplot2, # gráficos
caret, # para evaluación de modelos predictivos
glmnet, # para evaluación de modelos predictivos
data.table, # para manipulación de datos
class, # El paquete tiene a la funcion de k-neighbours
gmodels,
tree,
naniar) # missing
setwd("C:/Users/Juan/Documents/Problem_set_2_BDML/Data")
load("base_final.RData")
colnames(train_hogares)
library(dplyr)
train_hogares <- train_hogares %>% #seleccionar variables
select(Dominio)
train_hogares <- train_hogares %>%
dplyr::select(Dominio)
rm(list = ls())
#se cargan los paquetes
library(pacman)
# p_load(rio, # importación/exportación de datos
#        tidyverse, # datos ordenados (ggplot y Tidyverse)
#        skimr, # datos de resumen
#        visdat, # visualización de datos faltantes
#        corrplot, # gráficos de correlación
#        stargazer, # tablas/salida a TEX.
#        rvest, # web-scraping
#        readxl,
#        readr, # importar Excel
#        writexl, # exportar Excel
#        boot, # bootstrapping
#        ggpubr, # extensiones de ggplot2
#        WVPlots, # gráficos de variables ponderadas
#        patchwork, # para combinar gráficos
#        gridExtra, # para combinar gráficos
#        ggplot2, # gráficos
#        caret, # para evaluación de modelos predictivos
#        glmnet, # para evaluación de modelos predictivos
#        data.table, # para manipulación de datos
#        class, # El paquete tiene a la funcion de k-neighbours
#        gmodels,
#        MASS,
#        tree,
#        naniar) # missing
require("pacman")
p_load("tidyverse",
"glmnet",
"caret",
"smotefamily",
"dplyr",
"dummy",
"MLeval",
"pROC") #*MLeval: Machine Learning Model Evaluation
setwd("C:/Users/Juan/Documents/Problem_set_2_BDML/Data")
load("base_final.RData")
colnames(train_hogares)
train_hogares <- train_hogares %>% #seleccionar variables
select(Dominio, Ocup_vivienda, Nper, maxEducLevel, nocupados, nincapacitados,
Cabecera, DormitorXpersona, Head_Mujer, ntrabajo_menores, Pobre)
train_hogares <- train_hogares %>% #seleccionar variables
dplyr::select(Dominio, Ocup_vivienda, Nper, maxEducLevel, nocupados, nincapacitados,
Cabecera, DormitorXpersona, Head_Mujer, ntrabajo_menores, Pobre)
dummys <- dummy(train_hogares[,c("Dominio","Ocup_vivienda","maxEducLevel")])
dummys
train_hogares <- cbind(train_hogares[c("Nper","nocupados","nincapacitados","Cabecera","DormitorXpersona",
"Head_Mujer","ntrabajo_menores","Pobre")],dummys)
str(train_hogares)
#### 3. Imbalances ----
#Clase Ignacio: Imbalance
prop.table(table(train_hogares$Pobre))
# Dividir los datos en conjuntos de entrenamiento (train) y prueba (test)
set.seed(6392) # Para reproducibilidad
train_indices <- as.integer(createDataPartition(train_hogares$Pobre, p = 0.8, list = FALSE))
train <- train_hogares[train_indices, ]
test <- train_hogares[-train_indices, ]
prop.table(table(train$Pobre))
prop.table(table(test$Pobre))
train_indices
Mod_2_LDA <- lda(formula = Pobre ~.,
data = train)
Mod_2_LDA
plot(Mod_2_LDA)
# Prediccion in-sample
Mod_2_LDA_pred <- predict(Mod_2_LDA, train)
# Matriz de confusion
table(Mod_2_LDA_pred, train$Pobre) #aca se puede ajustar el umbral
Mod_2_LDA_pred
# Matriz de confusion
table(Mod_2_LDA_pred, train$Pobre) #aca se puede ajustar el umbral
train$Pobre
Mod_2_LDA_pred
names(lda.pred)
# Modelo
library(MASS)
Mod_2_LDA
plot(Mod_2_LDA)
# Prediccion in-sample
Mod_2_LDA_pred <- predict(Mod_2_LDA, test)
names(Mod_2_LDA_pred)
Mod_2_LDA_pred.class <- Mod_2_LDA_pred$class
Mod_2_LDA_pred.class
# Matriz de confusion
table(Mod_2_LDA_pred.class, test$Pobre) #aca se puede ajustar el umbral
mean(Mod_1_LR_pred == train$Pobre)
mean(Mod_2_LDA_pred.class == test$Pobre)
confusionMatrix(data = test$Mod_2_LDA_pred,
reference = test$Pobre, positive="Yes", mode = "prec_recall")
confusionMatrix(data = test$Mod_2_LDA_pred.class,
reference = test$Pobre, positive="Yes", mode = "prec_recall")
test$Mod_2_LDA_pred.class
test$Pobre
confusionMatrix(data = Mod_2_LDA_pred.class,
reference = test$Pobre, positive="Yes", mode = "prec_recall")
predictors<-colnames(train  %>% select(-Pobre))
predictors<-colnames(train  %>% dplyr::select(-Pobre))
smote_output <- SMOTE(X = train[predictors],
target = train$Pobre)
smote_data <- smote_output$data
table(train$Pobre)
table(smote_data$class)
predictors<-colnames(train  %>% dplyr::select(-Pobre))
smote_output <- SMOTE(X = train[predictors],
target = train$Pobre)
SMOTE(X = train[predictors],
target = train$Pobre)
p_load("tidyverse",
"glmnet",
"caret",
"smotefamily",
"dplyr",
"dummy",
"MLeval",
"pROC") #*MLeval: Machine Learning Model Evaluation
smote_output <- SMOTE(X = train[predictors],
target = train$Pobre)
rm(list = ls())
#se cargan los paquetes
library(pacman)
require("pacman")
p_load("tidyverse",
"glmnet",
"caret",
"smotefamily",
"dplyr",
"dummy",
"MLeval",
"pROC") #*MLeval: Machine Learning Model Evaluation
setwd("C:/Users/Juan/Documents/Problem_set_2_BDML/Data")
load("base_final.RData")
colnames(train_hogares)
train_hogares <- train_hogares %>% #seleccionar variables
dplyr::select(Dominio, Ocup_vivienda, Nper, maxEducLevel, nocupados, nincapacitados,
Cabecera, DormitorXpersona, Head_Mujer, ntrabajo_menores, Pobre)
dummys <- dummy(train_hogares[,c("Dominio","Ocup_vivienda","maxEducLevel")])
dummys <- as.data.frame(apply(dummys,2,function(x){as.numeric(x)}))
train_hogares <- cbind(train_hogares[c("Nper","nocupados","nincapacitados","Cabecera","DormitorXpersona",
"Head_Mujer","ntrabajo_menores","Pobre")],dummys)
str(train_hogares)
prop.table(table(train_hogares$Pobre))
# Dividir los datos en conjuntos de entrenamiento (train) y prueba (test)
set.seed(6392) # Para reproducibilidad
train_indices <- as.integer(createDataPartition(train_hogares$Pobre, p = 0.8, list = FALSE))
train <- train_hogares[train_indices, ]
test <- train_hogares[-train_indices, ]
prop.table(table(train$Pobre))
prop.table(table(test$Pobre))
predictors<-colnames(train  %>% dplyr::select(-Pobre))
smote_output <- SMOTE(X = train[predictors],
target = train$Pobre)
smote_data <- smote_output$data
table(train$Pobre)
table(smote_data$class)
set.seed(6392)
Mod_2_LDA <- lda(formula = Pobre ~.,
data = smote_data)
smote_data
Mod_2_LDA <- lda(formula = Pobre ~.,
data = smote_data)
Mod_2_LDA
smote_data
Mod_2_LDA <- lda(formula = class ~.,
data = smote_data)
Mod_2_LDA
plot(Mod_2_LDA)
# Prediccion out-sample
Mod_2_LDA_pred <- predict(Mod_2_LDA, test)
names(Mod_2_LDA_pred)
Mod_2_LDA_pred.class <- Mod_2_LDA_pred$class
# Matriz de confusion
table(Mod_2_LDA_pred.class, test$class) #aca se puede ajustar el umbral
names(Mod_2_LDA_pred)
Mod_2_LDA_pred$class
test <- test  %>%
mutate(Mod_2_LDA_pred_smote = predict(Mod_2_LDA,newdata = test,
type = "raw"))
test <- test  %>%
dplyr::mutate(Mod_2_LDA_pred_smote = predict(Mod_2_LDA,newdata = test,
type = "raw"))
Mod_2_LDA
plot(Mod_2_LDA)
test
predict(Mod_2_LDA,newdata = test,
type = "raw")
Mod_2_LDA_pred_smote <-  predict(Mod_2_LDA,newdata = test,
type = "raw")
Mod_2_LDA_pred.class
Mod_2_LDA_pred_smote
names(Mod_2_LDA_pred_smote)
head(Mod_2_LDA_pred_smote)
Mod_2_LDA_pred_smote$class
Mod_2_LDA_pred_smote.class <- Mod_2_LDA_pred_smote$class
# Matriz de confusion
table(Mod_2_LDA_pred_smote.class, test$class) #aca se puede ajustar el umbral
test$class
test
# Matriz de confusion
table(Mod_2_LDA_pred_smote.class, test$Pobre) #aca se puede ajustar el umbral
mean(Mod_2_LDA_pred_smote.class == test$Pobre)
confusionMatrix(data = Mod_2_LDA_pred_smote.class,
reference = test$Pobre, positive="Yes", mode = "prec_recall")
write.csv(predictSample,"classification_Lin_Disc_Analysis_smote.csv", row.names = FALSE)
Mod_2_LDA_smote <- lda(formula = class ~.,
data = smote_data)
Mod_2_LDA_smote
plot(Mod_2_LDA_smote)
# Prediccion out-sample
Mod_2_LDA_pred_smote <-  predict(Mod_2_LDA_smote,newdata = test,
type = "raw")
predictSample <- test_hogares   %>%
dplyr::mutate(Pobre = predict(Mod_2_LDA_smote, newdata = test_hogares, type = "raw"))  %>%
dplyr::select(id,Pobre)
predictSample
test_hogares
predict(Mod_2_LDA_smote, newdata = test_hogares, type = "raw")
test_hogares <- test_hogares %>% #seleccionar variables
select(-Clase, #ya esta cabecera
-P5010, #¿en cuántos de esos cuartos duermen las personas de este hogar?
-P5100,#cuando paga por amort (ya esta con ln(cuota)
-P5140,#arriendo ya esta con ln,
-Li,
-Lp,
-Npersug, #no. personas unidad gasto,
-Fex_c)
test_hogares <- test_hogares %>% #seleccionar variables
dplyr::selectselect(-Clase, #ya esta cabecera
-P5010, #¿en cuántos de esos cuartos duermen las personas de este hogar?
-P5100,#cuando paga por amort (ya esta con ln(cuota)
-P5140,#arriendo ya esta con ln,
-Li,
-Lp,
-Npersug, #no. personas unidad gasto,
-Fex_c)
test_hogares <- test_hogares %>% #seleccionar variables
dplyr::select(-Clase, #ya esta cabecera
-P5010, #¿en cuántos de esos cuartos duermen las personas de este hogar?
-P5100,#cuando paga por amort (ya esta con ln(cuota)
-P5140,#arriendo ya esta con ln,
-Li,
-Lp,
-Npersug, #no. personas unidad gasto,
-Fex_c)
dummys <- dummy(subset(test_hogares, select = c(Dominio, Depto, Ocup_vivienda, maxEducLevel,
Head_EducLevel, Head_Oficio, Head_Ocupacion)))
dummys <- as.data.frame(apply(dummys,2,function(x){as.numeric(x)}))
test_hogares <- cbind(subset(test_hogares, select = -c(Dominio, Depto, Ocup_vivienda, maxEducLevel,
Head_EducLevel, Head_Oficio, Head_Ocupacion)),dummys)
predictSample <- test_hogares   %>%
dplyr::mutate(Pobre = predict(Mod_2_LDA_smote, newdata = test_hogares, type = "raw"))  %>%
dplyr::select(id,Pobre)
train_hogares <- train_hogares[c(colnames(test_hogares)[2:ncol(test_hogares)],"Pobre")]
train_hogares[c(colnames(test_hogares)[2:ncol(test_hogares)],"Pobre")]
#dejar variables que comparten test y train depsues de crear dummys
train_hogares <- train_hogares[c(colnames(test_hogares)[2:ncol(test_hogares)],"Pobre")]
predictSample <- test_hogares   %>%
dplyr::mutate(Pobre = predict(Mod_2_LDA_smote, newdata = test_hogares, type = "raw"))  %>%
dplyr::select(id,Pobre)
rm(list = ls())
require("pacman")
p_load("tidyverse",
"glmnet",
"caret",
"smotefamily",
"dplyr",
"dummy",
"MLeval",
"pROC") #*MLeval: Machine Learning Model Evaluation
#se define la ruta de trabajo
setwd("C:/Users/Juan/Documents/Problem_set_2_BDML/Data")
load("base_final.RData")
colnames(train_hogares)
train_hogares <- train_hogares %>% #seleccionar variables
dplyr::select(Dominio, Ocup_vivienda, Nper, maxEducLevel, nocupados, nincapacitados,
Cabecera, DormitorXpersona, Head_Mujer, ntrabajo_menores, Pobre)
dummys <- dummy(train_hogares[,c("Dominio","Ocup_vivienda","maxEducLevel")])
dummys <- as.data.frame(apply(dummys,2,function(x){as.numeric(x)}))
train_hogares <- cbind(train_hogares[c("Nper","nocupados","nincapacitados","Cabecera","DormitorXpersona",
"Head_Mujer","ntrabajo_menores","Pobre")],dummys)
str(train_hogares)
train_hogares <- train_hogares %>% #seleccionar variables
dplyr::select(Dominio, Ocup_vivienda, Nper, maxEducLevel, nocupados, nincapacitados,
Cabecera, DormitorXpersona, Head_Mujer, ntrabajo_menores, Pobre)
train_hogares <- train_hogares %>% #seleccionar variables
dplyr::select(Dominio, Ocup_vivienda, Nper, maxEducLevel, nocupados, nincapacitados,
Cabecera, DormitorXpersona, Head_Mujer, ntrabajo_menores, Pobre)
rm(list = ls())
#se cargan los paquetes
#library(pacman)
# p_load(rio, # importación/exportación de datos
#        tidyverse, # datos ordenados (ggplot y Tidyverse)
#        skimr, # datos de resumen
#        visdat, # visualización de datos faltantes
#        corrplot, # gráficos de correlación
#        stargazer, # tablas/salida a TEX.
#        rvest, # web-scraping
#        readxl,
#        readr, # importar Excel
#        writexl, # exportar Excel
#        boot, # bootstrapping
#        ggpubr, # extensiones de ggplot2
#        WVPlots, # gráficos de variables ponderadas
#        patchwork, # para combinar gráficos
#        gridExtra, # para combinar gráficos
#        ggplot2, # gráficos
#        caret, # para evaluación de modelos predictivos
#        glmnet, # para evaluación de modelos predictivos
#        data.table, # para manipulación de datos
#        class, # El paquete tiene a la funcion de k-neighbours
#        gmodels,
#        MASS,
#        tree,
#        naniar) # missing
require("pacman")
p_load("tidyverse",
"glmnet",
"caret",
"smotefamily",
"dplyr",
"dummy",
"MLeval",
"pROC") #*MLeval: Machine Learning Model Evaluation
#se define la ruta de trabajo
setwd("C:/Users/Juan/Documents/Problem_set_2_BDML/Data")
load("base_final.RData")
colnames(train_hogares)
train_hogares <- train_hogares %>% #seleccionar variables
dplyr::select(-id,
-Clase, #ya esta cabecera
-P5010, #¿en cuántos de esos cuartos duermen las personas de este hogar?
-P5100,#cuando paga por amort (ya esta con ln(cuota)
-P5140,#arriendo ya esta con ln,
-Npersug, #no. personas unidad gasto,
-Ingtotug,
-Ingtotugarr,
-Li,
-Lp,
-Ingpcug,
-Ln_Ing_tot_hogar_imp_arr,
-Ln_Ing_tot_hogar_per_cap,
-Ln_Ing_tot_hogar,
-Fex_c)
dummys <- dummy(subset(train_hogares, select = c(Dominio, Depto, Ocup_vivienda, maxEducLevel,
Head_EducLevel, Head_Oficio, Head_Ocupacion)))
dummys <- as.data.frame(apply(dummys,2,function(x){as.numeric(x)}))
train_hogares <- cbind(subset(train_hogares, select = -c(Dominio, Depto, Ocup_vivienda, maxEducLevel,
Head_EducLevel, Head_Oficio, Head_Ocupacion)),dummys)
test_hogares <- test_hogares %>% #seleccionar variables
dplyr::select(-Clase, #ya esta cabecera
-P5010, #¿en cuántos de esos cuartos duermen las personas de este hogar?
-P5100,#cuando paga por amort (ya esta con ln(cuota)
-P5140,#arriendo ya esta con ln,
-Li,
-Lp,
-Npersug, #no. personas unidad gasto,
-Fex_c)
dummys <- dummy(subset(test_hogares, select = c(Dominio, Depto, Ocup_vivienda, maxEducLevel,
Head_EducLevel, Head_Oficio, Head_Ocupacion)))
dummys <- as.data.frame(apply(dummys,2,function(x){as.numeric(x)}))
test_hogares <- cbind(subset(test_hogares, select = -c(Dominio, Depto, Ocup_vivienda, maxEducLevel,
Head_EducLevel, Head_Oficio, Head_Ocupacion)),dummys)
#dejar variables que comparten test y train depsues de crear dummys
train_hogares <- train_hogares[c(colnames(test_hogares)[2:ncol(test_hogares)],"Pobre")]
prop.table(table(train_hogares$Pobre))
# Dividir los datos en conjuntos de entrenamiento (train) y prueba (test)
set.seed(6392) # Para reproducibilidad
train_indices <- as.integer(createDataPartition(train_hogares$Pobre, p = 0.8, list = FALSE))
train <- train_hogares[train_indices, ]
test <- train_hogares[-train_indices, ]
prop.table(table(train$Pobre))
prop.table(table(test$Pobre))
predictors <- colnames(train  %>% select(-Pobre))
predictors <- colnames(train  %>% dplyr::select(-Pobre))
smote_output <- SMOTE(X = train[predictors],
target = train$Pobre)
smote_data <- smote_output$data
table(train$Pobre)
table(smote_data$class)
set.seed(6392)
Mod_2_LDA_smote <- lda(formula = class ~.,
data = smote_data)
Mod_2_LDA_smote
plot(Mod_2_LDA_smote)
Mod_2_LDA_pred_smote <-  predict(Mod_2_LDA_smote,newdata = test,
type = "raw")
names(Mod_2_LDA_pred_smote)
head(Mod_2_LDA_pred_smote)
Mod_2_LDA_pred_smote.class <- Mod_2_LDA_pred_smote$class
# Matriz de confusion
table(Mod_2_LDA_pred_smote.class, test$Pobre) #aca se puede ajustar el umbral
mean(Mod_2_LDA_pred_smote.class == test$Pobre)
confusionMatrix(data = Mod_2_LDA_pred_smote.class,
reference = test$Pobre, positive="Yes", mode = "prec_recall")
predictSample <- test_hogares   %>%
dplyr::mutate(Pobre = predict(Mod_2_LDA_smote, newdata = test_hogares, type = "raw"))  %>%
dplyr::select(id,Pobre)
predictSample
predict(Mod_2_LDA_smote, newdata = test_hogares, type = "raw")
predictSample <- test_hogares   %>%
dplyr::mutate(Pobre = predict(Mod_2_LDA_smote, newdata = test_hogares, type = "raw"))
test_hogares
Pobre <-  predict(Mod_2_LDA_smote, newdata = test_hogares, type = "raw")
Pobre
predictSample <- test_hogares   %>%
dplyr::mutate(Pobre = predict(Mod_2_LDA_smote, newdata = test_hogares, type = "raw"))
rlang::last_trace()
predictSample <- test_hogares   %>%
mutate(Pobre = predict(Mod_2_LDA_smote, newdata = test_hogares, type = "raw"))
test<- test  %>% mutate(pobre_hat_model1=predict(Mod_2_LDA_smote,newdata = test,
type = "raw"))
test<- test  %>% dplyr::mutate(pobre_hat_model1=predict(Mod_2_LDA_smote,newdata = test,
type = "raw"))
predictSample <- test_hogares   %>%
dplyr::mutate(Pobre = predict(Mod_2_LDA_smote, newdata = test_hogares, type = "raw"))
Pobre
length(Pobre)
view(Pobre)
# Predicción Modelo 2 con Smote
library(stats)
predictSample <- test_hogares   %>%
dplyr::mutate(Pobre = predict(Mod_2_LDA_smote, newdata = test_hogares, type = "raw"))  %>%
dplyr::select(id,Pobre)
predict(Mod_2_LDA_smote, newdata = test_hogares, type = "raw")
Pobre[,1]
class(Pobre)
Pobre[, 1]
as.data.frame(Pobre[, 1])
Pobre$class
predict(Mod_2_LDA_smote, newdata = test_hogares, type = "raw")$class
predict(Mod_2_LDA_smote, newdata = test_hogares, type = "raw")$class
predictSample <- test_hogares   %>%
dplyr::mutate(Pobre = predict(Mod_2_LDA_smote, newdata = test_hogares, type = "raw")$class)  %>%
dplyr::select(id,Pobre)
predictSample<- predictSample %>%
mutate(pobre=ifelse(Pobre=="Yes",1,0)) %>%
select(id,pobre)
predictSample<- predictSample %>%
dplyr::mutate(pobre=ifelse(Pobre=="Yes",1,0)) %>%
dplyr::select(id,pobre)
write.csv(predictSample,"classification_Lin_Disc_Analysis_smote.csv", row.names = FALSE)
