Ocupacion,
Nivel_formalidad,
EducLevel, #Replace 9 with 0
ocupado,
exper_ult_trab,
Rec_alimento, #Recibio alimentos como parte de pago del salario
Rec_vivienda,
Cot_pension,
Rec_subsidio,
Pet,
Ln_Ing_extra,
Fex_c,
Depto,
Fex_dpto)
test_personas <- test_personas %>%
select(
id,
Orden,
Clase,
Dominio,
Edad,
Mujer,
H_Head,#Household head
Afiliado_SS, #Afiliado a seg social en salud
Reg_subs_salud, #Pertenece al regimen de salud subsidiado
Menor, # Menores
Oficio,
Ocupacion,
Nivel_formalidad,
EducLevel, #Replace 9 with 0
ocupado,
exper_ult_trab,
Rec_alimento, #Recibio alimentos como parte de pago del salario
Rec_vivienda,
Cot_pension,
Rec_subsidio,
Pet,
Fex_c,
Depto,
Fex_dpto)
colnames(train_personas)
#### 4. Identificacion de pobres en muestra ----
## Hogares
table(train_hogares$Pobre)
table(train_hogares$Pobre)[2]/nrow(train_hogares)
train_hogares <- train_hogares %>%
mutate(Pobre_ing=ifelse(Ing_tot_hog<Lp*Npersug,1,0))
table(train_hogares$Pobre_ing)
train_personas_nivel_hogar<- train_personas %>%
group_by(id) %>%
summarize(nmujeres=sum(mujer,na.rm=TRUE),
nmenores=sum(menor,na.rm=TRUE),
maxEducLevel=max(EducLevel,na.rm=TRUE),
nocupados=sum(ocupado,na.rm=TRUE)
train_personas_nivel_hogar<- train_personas %>%
train_personas_nivel_hogar<- train_personas %>%
group_by(id) %>%
summarize(nmujeres=sum(mujer,na.rm=TRUE),
nmenores=sum(menor,na.rm=TRUE),
maxEducLevel=max(EducLevel,na.rm=TRUE),
nocupados=sum(ocupado,na.rm=TRUE))
train_personas_nivel_hogar<- train_personas %>%
group_by(id) %>%
summarize(nmujeres=sum(Mujer,na.rm=TRUE),
nmenores=sum(Menor,na.rm=TRUE),
maxEducLevel=max(EducLevel,na.rm=TRUE),
nocupados=sum(ocupado,na.rm=TRUE))
View(train_personas_nivel_hogar)
rm(list = ls())
#se cargan los paquetes
library(pacman)
p_load(rio, # importación/exportación de datos
tidyverse, # datos ordenados (ggplot y Tidyverse)
skimr, # datos de resumen
visdat, # visualización de datos faltantes
corrplot, # gráficos de correlación
stargazer, # tablas/salida a TEX.
rvest, # web-scraping
readxl,
readr, # importar Excel
writexl, # exportar Excel
boot, # bootstrapping
ggpubr, # extensiones de ggplot2
WVPlots, # gráficos de variables ponderadas
patchwork, # para combinar gráficos
gridExtra, # para combinar gráficos
ggplot2, # gráficos
caret, # para evaluación de modelos predictivos
glmnet, # para evaluación de modelos predictivos
data.table, # para manipulación de datos
naniar) # missing
#se define la ruta de trabajo
ifelse(grepl("camilabeltran", getwd()),
wd <- "/Users/camilabeltran/OneDrive/Educación/PEG - Uniandes/BDML/GitHub/problem_set/Problem_set_1",
ifelse(grepl("Juan",getwd()),
wd <- "C:/Users/Juan/Documents/Problem_set_2",
ifelse(grepl("juanp.rodriguez",getwd()),
wd <- "C:/Users/juanp.rodriguez/Documents/GitHub/Problem_set_1",
ifelse(grepl("C:/Users/User",getwd()),
wd <- "C:/Users/User/OneDrive - Universidad de los andes/Big Data y Machine Learning/Problem_set_1/Problem_set_1",
ifelse(grepl("/Users/aleja/",getwd()),
wd <- "/Users/aleja/Documents/Maestría Uniandes/Clases/Big Data y Machine Learning/Repositorios Git Hub/Problem_set_1)",
wd <- "otro_directorio")))))
#Script: "01_web_scraping.R". Realiza el proceso de web scraping para conseguir los datos
setwd(paste0(wd,"/scripts"))
### Importar las bases de entrenamiento
# Personas
train_personas <- read_csv("~/Problem_set_2/Data/train_personas.csv")
save.image("~/Problem_set_2_BDML/scripts_2/train_personas.RData")
### Importar las bases de entrenamiento
# Personas
load(file = train_personas.RData)
### Importar las bases de entrenamiento
# Personas
load(file = "train_personas.RData")
### Importar las bases de entrenamiento
# Personas
load(file = "train_personas.RData")
View(train_personas)
library(randomForest)
install.packages("randomForest")
library(randomForest)
set.seed(1)
bag.boston <- randomForest(medv ~ ., data = Boston,
subset = train, mtry = 12, importance = TRUE)
library(MASS)
set.seed(1)
bag.boston <- randomForest(medv ~ ., data = Boston,
subset = train, mtry = 12, importance = TRUE)
set.seed(1)
train <- sample(1:nrow(Boston), nrow(Boston) / 2)
set.seed(1)
bag.boston <- randomForest(medv ~ ., data = Boston,
subset = train, mtry = 12, importance = TRUE)
View(bag.boston)
View(Boston)
length(Boston)
yhat.bag <- predict(bag.boston, newdata = Boston[-train, ])
plot(yhat.bag, boston.test)
boston.test <- Boston[-train, "medv"]
yhat.bag <- predict(bag.boston, newdata = Boston[-train, ])
plot(yhat.bag, boston.test)
abline(0, 1)
rm(list = ls())
#se cargan los paquetes
library(pacman)
p_load(rio, # importación/exportación de datos
tidyverse, # datos ordenados (ggplot y Tidyverse)
skimr, # datos de resumen
visdat, # visualización de datos faltantes
corrplot, # gráficos de correlación
stargazer, # tablas/salida a TEX.
rvest, # web-scraping
readxl,
readr, # importar Excel
writexl, # exportar Excel
boot, # bootstrapping
ggpubr, # extensiones de ggplot2
WVPlots, # gráficos de variables ponderadas
patchwork, # para combinar gráficos
gridExtra, # para combinar gráficos
ggplot2, # gráficos
caret, # para evaluación de modelos predictivos
glmnet, # para evaluación de modelos predictivos
data.table, # para manipulación de datos
naniar) # missing
#se define la ruta de trabajo
ifelse(grepl("camilabeltran", getwd()),
wd <- "/Users/camilabeltran/OneDrive/Educación/PEG - Uniandes/BDML/Problem_set_2_BDML",
ifelse(grepl("Juan",getwd()),
wd <- "C:/Users/Juan/Documents/Problem_set_2",
ifelse(grepl("juanp.rodriguez",getwd()),
wd <- "C:/Users/juanp.rodriguez/Documents/GitHub/Problem_set_1",
ifelse(grepl("C:/Users/User",getwd()),
wd <- "C:/Users/User/OneDrive - Universidad de los andes/Big Data y Machine Learning/Problem_set_1/Problem_set_1",
ifelse(grepl("/Users/aleja/",getwd()),
wd <- "/Users/aleja/Documents/Maestría Uniandes/Clases/Big Data y Machine Learning/Repositorios Git Hub/Problem_set_2_BDML",
wd <- "otro_directorio")))))
# Personas
setwd(paste0(wd,"/Data"))
load(file = "train_personas.RData")
# Personas
setwd(paste0(wd,"/Data"))
load(file = "train_personas.RData")
rm(list = ls())
#se cargan los paquetes
library(pacman)
p_load(rio, # importación/exportación de datos
tidyverse, # datos ordenados (ggplot y Tidyverse)
skimr, # datos de resumen
visdat, # visualización de datos faltantes
corrplot, # gráficos de correlación
stargazer, # tablas/salida a TEX.
rvest, # web-scraping
readxl,
readr, # importar Excel
writexl, # exportar Excel
boot, # bootstrapping
ggpubr, # extensiones de ggplot2
WVPlots, # gráficos de variables ponderadas
patchwork, # para combinar gráficos
gridExtra, # para combinar gráficos
ggplot2, # gráficos
caret, # para evaluación de modelos predictivos
glmnet, # para evaluación de modelos predictivos
data.table, # para manipulación de datos
naniar) # missing
#se define la ruta de trabajo
ifelse(grepl("camilabeltran", getwd()),
wd <- "/Users/camilabeltran/OneDrive/Educación/PEG - Uniandes/BDML/Problem_set_2_BDML",
ifelse(grepl("Juan",getwd()),
wd <- "C:/Users/Juan/Documents/Problem_set_2_BDML",
ifelse(grepl("juanp.rodriguez",getwd()),
wd <- "C:/Users/juanp.rodriguez/Documents/GitHub/Problem_set_1",
ifelse(grepl("C:/Users/User",getwd()),
wd <- "C:/Users/User/OneDrive - Universidad de los andes/Big Data y Machine Learning/Problem_set_1/Problem_set_1",
ifelse(grepl("/Users/aleja/",getwd()),
wd <- "/Users/aleja/Documents/Maestría Uniandes/Clases/Big Data y Machine Learning/Repositorios Git Hub/Problem_set_2_BDML",
wd <- "otro_directorio")))))
setwd(paste0(wd,"/Data"))
load(file = "train_personas.RData")
length(train_personas) # 135 variables
nrow(train_personas) # 543.109 observaciones
# Hogares
train_hogares <- read_csv("train_hogares.csv")
length(train_hogares) # 23 variables
nrow(train_hogares) # 164.960 observaciones
### Importar las bases de testeo
# Personas
test_personas <- read_csv("test_personas.csv")
length(test_personas) # 63 variables
nrow(test_personas) # 219.644 observaciones
# Hogares
test_hogares <- read_csv("test_hogares.csv")
length(test_hogares) # 16 variables
nrow(test_hogares) # 66.168 observaciones
### Variables importantes
colnames(train_personas)
colnames(test_personas)
# id es el hogar
# El orden es la persona especifica del hogar
colnames(train_hogares)
colnames(test_hogares)
# Los hogares no tienen la variable Orden porque las personas estan
# agrupadas o colapsadas en id
##personas
train_personas <- train_personas[,c(colnames(test_personas))]
View(test_hogares)
View(train_personas)
View(train_hogares)
View(train_personas)
View(train_hogares)
ggplot(train_hogares, aes(x = Ingpcug, fill = Pobre)) +
geom_density(alpha = 0.5) +
labs(x = "Ingreso", y = "Densidad") +
theme_minimal()
ggplot(train_hogares, aes(x = Ingpcug, fill = Pobre)) +
geom_density(alpha = 0.5) +
geom_vline(xintercept = train_hogares$Lp, color = "red", linetype = "dashed")+
labs(x = "Ingreso", y = "Densidad") +
theme_minimal()
train_hogares_Graf <-  train_hogares %>%
filter(Ingtotug < 2000000)
ggplot(train_hogares_Graf, aes(x = Ingpcug, fill = Pobre)) +
geom_density(alpha = 0.5) +
geom_vline(xintercept = train_hogares$Lp, color = "red", linetype = "dashed")+
labs(x = "Ingreso", y = "Densidad") +
theme_minimal()
ggplot(train_hogares_Graf, aes(x = Ingpcug, fill = as.factor(Pobre))) +
geom_density(alpha = 0.5) +
geom_vline(xintercept = train_hogares$Lp, color = "red", linetype = "dashed")+
labs(x = "Ingreso", y = "Densidad") +
theme_minimal()
ggplot(train_hogares_Graf, aes(x = Ingpcug)) +
geom_density(alpha = 0.5, fill = as.factor(Pobre)) +
geom_vline(xintercept = train_hogares$Lp, color = "red", linetype = "dashed")+
labs(x = "Ingreso", y = "Densidad") +
theme_minimal()
ggplot(train_hogares_Graf, aes(x = Ingpcug)) +
geom_density(alpha = 0.5, fill = as.factor(train_hogares_Graf$Pobre)) +
geom_vline(xintercept = train_hogares$Lp, color = "red", linetype = "dashed")+
labs(x = "Ingreso", y = "Densidad") +
theme_minimal()
ggplot(train_hogares_Graf, aes(x = Ingpcug)) +
geom_density(alpha = 0.5) +
geom_vline(xintercept = train_hogares$Lp, color = "red", linetype = "dashed")+
labs(x = "Ingreso", y = "Densidad") +
theme_minimal()
ggplot(train_hogares_Graf, aes(x = Ingpcug)) +
geom_density(alpha = 0.5) +
geom_vline(xintercept = train_hogares$Lp, color = "red")+
labs(x = "Ingreso", y = "Densidad") +
theme_minimal()
ggplot(train_hogares_Graf, aes(x = Ingpcug, fill = as.factor(Pobre))) +
geom_area(alpha = 0.5) +
geom_vline(xintercept = train_hogares$Lp, color = "red")+
labs(x = "Ingreso", y = "Densidad") +
theme_minimal()
ggplot(train_hogares_Graf, aes(x = Ingpcug), fill = as.factor(Pobre)) +
geom_area(alpha = 0.5) +
geom_vline(xintercept = train_hogares$Lp, color = "red")+
labs(x = "Ingreso", y = "Densidad") +
theme_minimal()
ggplot(train_hogares_Graf, aes(x = Ingpcug), fill = as.factor(Pobre)) +
geom_density(alpha = 0.5) +
geom_vline(xintercept = train_hogares$Lp, color = "red")+
labs(x = "Ingreso", y = "Densidad") +
theme_minimal()
ggplot(train_hogares_Graf, aes(x = Ingpcug), fill = as.factor(Pobre)) +
geom_density(bw = "nrd", alpha = 0.5) +
geom_vline(xintercept = train_hogares$Lp, color = "red")+
labs(x = "Ingreso", y = "Densidad") +
theme_minimal()
train_hogares_Graf <-  train_hogares %>%
filter(Ingtotug < 2000000) %>%
muate(y = density(Ingtotug))
train_hogares_Graf <-  train_hogares %>%
filter(Ingtotug < 2000000) %>%
mutate(y = density(Ingtotug))
ggplot(train_hogares_Graf, aes(x = Ingpcug)) +
geom_density(fill = "blue", alpha = 0.5) +
geom_vline(xintercept = mean(train_hogares$Lp), color = "red", linetype = "dashed") +
labs(x = "Ingreso", y = "Densidad") +
theme_minimal()
media_ingreso <- mean(train_hogares$Lp)
ggplot(train_hogares_Graf, aes(x = Ingpcug)) +
geom_histogram(data = subset(train_hogares_Graf, Ingpcug < media_ingreso), fill = "red", binwidth = 1) +
geom_histogram(data = subset(train_hogares_Graf, Ingpcug >= media_ingreso), fill = "blue", binwidth = 1) +
geom_vline(aes(xintercept = media_ingreso), color = "green", linetype = "dashed", size = 1) +
theme_minimal() +
labs(title = "Distribución del Ingreso",
subtitle = "Observaciones por debajo y por encima de la media",
x = "Ingreso",
y = "Frecuencia")
media_ingreso <- mean(train_hogares$Lp)
ggplot(train_hogares_Graf, aes(x = Ingpcug)) +
geom_histogram(data = subset(train_hogares_Graf, Ingpcug < media_ingreso), fill = "red", binwidth = 1) +
geom_histogram(data = subset(train_hogares_Graf, Ingpcug >= media_ingreso), fill = "blue", binwidth = 1) +
geom_vline(aes(xintercept = media_ingreso), color = "green", linetype = "dashed", size = 1) +
theme_minimal() +
labs(title = "Distribución del Ingreso",
subtitle = "Observaciones por debajo y por encima de la media",
x = "Ingreso",
y = "Frecuencia")
media_ingreso
ggplot(train_hogares_Graf, aes(x = Ingpcug)) +
geom_density(data = subset(train_hogares_Graf, Ingpcug < media_ingreso), fill = "red", binwidth = 1) +
geom_density(data = subset(train_hogares_Graf, Ingpcug >= media_ingreso), fill = "blue", binwidth = 1) +
geom_vline(aes(xintercept = media_ingreso), color = "green", linetype = "dashed", size = 1) +
theme_minimal() +
labs(title = "Distribución del Ingreso",
subtitle = "Observaciones por debajo y por encima de la media",
x = "Ingreso",
y = "Frecuencia")
ggplot(train_hogares_Graf, aes(x = Ingpcug)) +
geom_area(data = subset(train_hogares_Graf, Ingpcug < media_ingreso), fill = "red", binwidth = 1) +
geom_area(data = subset(train_hogares_Graf, Ingpcug >= media_ingreso), fill = "blue", binwidth = 1) +
geom_vline(aes(xintercept = media_ingreso), color = "green", linetype = "dashed", size = 1) +
theme_minimal() +
labs(title = "Distribución del Ingreso",
subtitle = "Observaciones por debajo y por encima de la media",
x = "Ingreso",
y = "Frecuencia")
ggplot(train_hogares_Graf, aes(x = Ingpcug)) +
geom_area(data = subset(train_hogares_Graf, Ingpcug < media_ingreso), fill = "red", binwidth = 1) +
geom_area(data = subset(train_hogares_Graf, Ingpcug >= media_ingreso), fill = "blue", binwidth = 1) +
geom_vline(aes(xintercept = media_ingreso), color = "green", linetype = "dashed", size = 1) +
theme_minimal() +
labs(title = "Distribución del Ingreso",
subtitle = "Observaciones por debajo y por encima de la media",
x = "Ingreso",
y = "Frecuencia")
ggplot(train_hogares_Graf, aes(x = Ingpcug)) +
geom_histogram(data = subset(train_hogares_Graf, Ingpcug < media_ingreso), fill = "red", binwidth = 1) +
geom_histogram(data = subset(train_hogares_Graf, Ingpcug >= media_ingreso), fill = "blue", binwidth = 1) +
geom_vline(aes(xintercept = media_ingreso), color = "green", linetype = "dashed", size = 1) +
theme_minimal() +
labs(title = "Distribución del Ingreso",
subtitle = "Observaciones por debajo y por encima de la media",
x = "Ingreso",
y = "Frecuencia")
ggplot(train_hogares_Graf, aes(x = Ingpcug)) +
geom_histogram(data = subset(train_hogares_Graf, Ingpcug < media_ingreso), fill = "red") +
geom_histogram(data = subset(train_hogares_Graf, Ingpcug >= media_ingreso), fill = "blue") +
geom_vline(aes(xintercept = media_ingreso), color = "green", linetype = "dashed", size = 1) +
theme_minimal() +
labs(title = "Distribución del Ingreso",
subtitle = "Observaciones por debajo y por encima de la media",
x = "Ingreso",
y = "Frecuencia")
ggplot(train_hogares_Graf, aes(x = Ingpcug)) +
geom_density2d_filled(data = subset(train_hogares_Graf, Ingpcug < media_ingreso), fill = "red") +
geom_density_2d(data = subset(train_hogares_Graf, Ingpcug >= media_ingreso), fill = "blue") +
geom_vline(aes(xintercept = media_ingreso), color = "green", linetype = "dashed", size = 1) +
theme_minimal() +
labs(title = "Distribución del Ingreso",
subtitle = "Observaciones por debajo y por encima de la media",
x = "Ingreso",
y = "Frecuencia")
ggplot(train_hogares_Graf, aes(x = Ingpcug)) +
geom_density2d(data = subset(train_hogares_Graf, Ingpcug < media_ingreso), fill = "red") +
geom_density2d(data = subset(train_hogares_Graf, Ingpcug >= media_ingreso), fill = "blue") +
geom_vline(aes(xintercept = media_ingreso), color = "green", linetype = "dashed", size = 1) +
theme_minimal() +
labs(title = "Distribución del Ingreso",
subtitle = "Observaciones por debajo y por encima de la media",
x = "Ingreso",
y = "Frecuencia")
geom_density(data = subset(train_hogares_Graf, Ingpcug < media_ingreso), fill = "red") +
geom_density(data = subset(train_hogares_Graf, Ingpcug >= media_ingreso), fill = "blue") +
geom_vline(aes(xintercept = media_ingreso), color = "green", linetype = "dashed", size = 1) +
theme_minimal() +
labs(title = "Distribución del Ingreso",
subtitle = "Observaciones por debajo y por encima de la media",
x = "Ingreso",
y = "Frecuencia")
ggplot(train_hogares_Graf, aes(x = Ingpcug)) +
geom_density(data = subset(train_hogares_Graf, Ingpcug < media_ingreso), fill = "red") +
geom_density(data = subset(train_hogares_Graf, Ingpcug >= media_ingreso), fill = "blue") +
geom_vline(aes(xintercept = media_ingreso), color = "green", linetype = "dashed", size = 1) +
theme_minimal() +
labs(title = "Distribución del Ingreso",
subtitle = "Observaciones por debajo y por encima de la media",
x = "Ingreso",
y = "Frecuencia")
ggplot(train_hogares_Graf, aes(x = Ingpcug), fill(as.factor(Pobre))) +
geom_density(data = subset(train_hogares_Graf, Ingpcug < media_ingreso), fill = "red") +
geom_density(data = subset(train_hogares_Graf, Ingpcug >= media_ingreso), fill = "blue") +
geom_vline(aes(xintercept = media_ingreso), color = "green", linetype = "dashed", size = 1) +
theme_minimal() +
labs(title = "Distribución del Ingreso",
subtitle = "Observaciones por debajo y por encima de la media",
x = "Ingreso",
y = "Frecuencia")
ggplot(train_hogares_Graf, aes(x = Ingpcug)) +
geom_area(data = subset(train_hogares_Graf, Ingpcug < media_ingreso), fill = "red") +
geom_area(data = subset(train_hogares_Graf, Ingpcug >= media_ingreso), fill = "blue") +
geom_vline(aes(xintercept = media_ingreso), color = "green", linetype = "dashed", size = 1) +
theme_minimal() +
labs(title = "Distribución del Ingreso",
subtitle = "Observaciones por debajo y por encima de la media",
x = "Ingreso",
y = "Frecuencia")
rlang::last_trace()
ggplot(train_hogares_Graf, aes(x = Ingpcug)) +
geom_histogram(data = subset(train_hogares_Graf, Ingpcug < media_ingreso), fill = "red", bins = 80) +
geom_hostogram(data = subset(train_hogares_Graf, Ingpcug >= media_ingreso), fill = "blue", bins = 80) +
geom_vline(aes(xintercept = media_ingreso), color = "green", linetype = "dashed", size = 1) +
theme_minimal() +
labs(title = "Distribución del Ingreso",
subtitle = "Observaciones por debajo y por encima de la media",
x = "Ingreso",
y = "Frecuencia")
ggplot(train_hogares_Graf, aes(x = Ingpcug)) +
geom_histogram(data = subset(train_hogares_Graf, Ingpcug < media_ingreso), fill = "red", bins = 80) +
geom_histogram(data = subset(train_hogares_Graf, Ingpcug >= media_ingreso), fill = "blue", bins = 80) +
geom_vline(aes(xintercept = media_ingreso), color = "green", linetype = "dashed", size = 1) +
theme_minimal() +
labs(title = "Distribución del Ingreso",
subtitle = "Observaciones por debajo y por encima de la media",
x = "Ingreso",
y = "Frecuencia")
ggplot(train_hogares_Graf, aes(x = Ingpcug)) +
geom_histogram(data = subset(train_hogares_Graf, Ingpcug < media_ingreso), fill = "red", bins = 80) +
geom_histogram(data = subset(train_hogares_Graf, Ingpcug >= media_ingreso), fill = "blue", bins = 50) +
geom_vline(aes(xintercept = media_ingreso), color = "green", linetype = "dashed", size = 1) +
theme_minimal() +
labs(title = "Distribución del Ingreso",
subtitle = "Observaciones por debajo y por encima de la media",
x = "Ingreso",
y = "Frecuencia")
ggplot(train_hogares_Graf, aes(x = Ingpcug)) +
geom_histogram(data = subset(train_hogares_Graf, Ingpcug < media_ingreso), fill = "red", bins = 80) +
geom_histogram(data = subset(train_hogares_Graf, Ingpcug >= media_ingreso), fill = "blue", bins = 50) +
geom_density()
geom_vline(aes(xintercept = media_ingreso), color = "green", linetype = "dashed", size = 1) +
theme_minimal() +
labs(title = "Distribución del Ingreso",
subtitle = "Observaciones por debajo y por encima de la media",
x = "Ingreso",
y = "Frecuencia")
ggplot(train_hogares_Graf, aes(x = Ingpcug)) +
geom_histogram(data = subset(train_hogares_Graf, Ingpcug < media_ingreso), fill = "red", bins = 80) +
geom_histogram(data = subset(train_hogares_Graf, Ingpcug >= media_ingreso), fill = "blue", bins = 50) +
geom_density()+
geom_vline(aes(xintercept = media_ingreso), color = "green", linetype = "dashed", size = 1) +
theme_minimal() +
labs(title = "Distribución del Ingreso",
subtitle = "Observaciones por debajo y por encima de la media",
x = "Ingreso",
y = "Frecuencia")
ggplot(train_hogares_Graf, aes(x = Ingpcug)) +
geom_histogram(data = subset(train_hogares_Graf, Ingpcug < media_ingreso), fill = "red", bins = 80) +
geom_histogram(data = subset(train_hogares_Graf, Ingpcug >= media_ingreso), fill = "blue", bins = 40) +
geom_vline(aes(xintercept = media_ingreso), color = "green", linetype = "dashed", size = 1) +
theme_minimal() +
labs(title = "Distribución del Ingreso",
subtitle = "Observaciones por debajo y por encima de la media",
x = "Ingreso",
y = "Frecuencia")
ggplot(train_hogares_Graf, aes(x = Ingpcug)) +
geom_histogram(data = subset(train_hogares_Graf, Ingpcug < media_ingreso), fill = "red", bins = 40) +
geom_histogram(data = subset(train_hogares_Graf, Ingpcug >= media_ingreso), fill = "blue", bins = 40) +
geom_vline(aes(xintercept = media_ingreso), color = "green", linetype = "dashed", size = 1) +
theme_minimal() +
labs(title = "Distribución del Ingreso",
subtitle = "Observaciones por debajo y por encima de la media",
x = "Ingreso",
y = "Frecuencia")
train_personas <- train_personas[,c(colnames(test_personas))]
##hogares - se dejan además las variables que queremos predecir: Pobre e ingreso del hogar
train_hogares <- train_hogares[,c(colnames(test_hogares),"Pobre","Ingtotug","Ingtotugarr","Ingpcug")]
